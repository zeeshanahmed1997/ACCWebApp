using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Domain.Models;
using Newtonsoft.Json;
using System.Text;

public class SalesController : Controller
{
    private readonly IHttpClientFactory _httpClientFactory;

    public SalesController(IHttpClientFactory httpClientFactory)
    {
        _httpClientFactory = httpClientFactory;
    }
    [HttpGet]
    public async Task<IActionResult> GetFabrics()
    {
        try
        {
            HttpClient client = _httpClientFactory.CreateClient();
            HttpResponseMessage response = await client.GetAsync("https://localhost:7241/api/Fabric");

            if (response.IsSuccessStatusCode)
            {
                List<Fabric> fabrics = await response.Content.ReadAsAsync<List<Fabric>>();
                return Json(fabrics);
            }
            else
            {
                return BadRequest("Failed to retrieve fabrics from the API.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest("An error occurred while retrieving fabrics: " + ex.Message);
        }
    }
    [HttpGet]
    public async Task<IActionResult> GetGenders()
    {
        try
        {
            HttpClient client = _httpClientFactory.CreateClient();
            HttpResponseMessage response = await client.GetAsync("https://localhost:7241/api/Gender");
            if (response.IsSuccessStatusCode)
            {
                List<Gender> genders = await response.Content.ReadAsAsync<List<Gender>>();
                return Json(genders);
            }
            else
            {
                return BadRequest("Failed to retrieve genders from the API.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest("An error occurred while retrieving genders: " + ex.Message);
        }
    }

    [HttpGet]
    public async Task<IActionResult> GetClothingTypes()
    {
        try
        {
            HttpClient client = _httpClientFactory.CreateClient();
            HttpResponseMessage response = await client.GetAsync("https://localhost:7241/api/clothingType");
            if (response.IsSuccessStatusCode)
            {
                List<ClothingType> types = await response.Content.ReadAsAsync<List<ClothingType>>();
                return Json(types);
            }
            else
            {
                return BadRequest("Failed to retrieve clothing types from the API.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest("An error occurred while retrieving clothing types: " + ex.Message);
        }
    }

    // Action to create a new sale record
    [HttpPost]
    public async Task<IActionResult> CreateSales(Sale sale)
    {
        try
        {
            if (ModelState.IsValid)
            {
                HttpClient client = _httpClientFactory.CreateClient();
                string json = JsonConvert.SerializeObject(sale);
                HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync("https://localhost:7241/api/sales", content);
                if (response.IsSuccessStatusCode)
                {
                    return Ok("Sale record created successfully!");
                }
                else
                {
                    return BadRequest("Failed to create the sale record. Please try again.");
                }
            }
            else
            {
               return BadRequest("Invalid data provided for creating the sale record.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest("An error occurred while creating the sale record: " + ex.Message);
        }
    }
}

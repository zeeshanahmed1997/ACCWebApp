CREATE TABLE Categories (
    category_id NVARCHAR(10) PRIMARY KEY DEFAULT 'CAT' + RIGHT('00000' + CAST(NEXT VALUE FOR CategorySeq AS NVARCHAR(5)), 5),
    category_name NVARCHAR(100) NOT NULL
);

CREATE TABLE Brands (
    brand_id NVARCHAR(10) PRIMARY KEY DEFAULT 'BRD' + RIGHT('00000' + CAST(NEXT VALUE FOR BrandSeq AS NVARCHAR(5)), 5),
    brand_name NVARCHAR(100) NOT NULL
);

CREATE TABLE Customers (
    customer_id NVARCHAR(10) PRIMARY KEY DEFAULT 'CUST' + RIGHT('00000' + CAST(NEXT VALUE FOR CustomerSeq AS NVARCHAR(5)), 5),
    first_name NVARCHAR(50) NOT NULL,
    last_name NVARCHAR(50) NOT NULL,
    email NVARCHAR(100) NOT NULL,
    password_hash NVARCHAR(255) NOT NULL,
    address NVARCHAR(255) NOT NULL,
    city NVARCHAR(100) NOT NULL,
    state NVARCHAR(100) NOT NULL,
    zip_code NVARCHAR(10) NOT NULL,
    phone_number NVARCHAR(20) NOT NULL,
    created_at DATETIME,
    updated_at DATETIME
);

CREATE TABLE Coupons (
    coupon_id NVARCHAR(10) PRIMARY KEY DEFAULT 'CPN' + RIGHT('00000' + CAST(NEXT VALUE FOR CouponSeq AS NVARCHAR(5)), 5),
    coupon_code NVARCHAR(20) NOT NULL,
    discount_percentage DECIMAL(5, 2) NOT NULL,
    expiration_date DATE
);

CREATE TABLE Product (
    product_id NVARCHAR(10) PRIMARY KEY DEFAULT 'PRD' + RIGHT('00000' + CAST(NEXT VALUE FOR ProductSeq AS NVARCHAR(5)), 5),
    product_name NVARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT NOT NULL,
    category_id NVARCHAR(10),
    brand_id NVARCHAR(10),
    created_at DATETIME,
    updated_at DATETIME,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id),
    FOREIGN KEY (brand_id) REFERENCES Brands(brand_id)
);

CREATE TABLE Product_Variants (
    variant_id NVARCHAR(10) PRIMARY KEY DEFAULT 'VAR' + RIGHT('00000' + CAST(NEXT VALUE FOR VariantSeq AS NVARCHAR(5)), 5),
    product_id NVARCHAR(10),
    variant_name NVARCHAR(100) NOT NULL,
    variant_price DECIMAL(10, 2) NOT NULL,
    variant_stock_quantity INT NOT NULL,
    variant_image_url NVARCHAR(255),
    created_at DATETIME,
    updated_at DATETIME,
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

CREATE TABLE Wishlist_Items (
    wishlist_item_id NVARCHAR(10) PRIMARY KEY DEFAULT 'WITM' + RIGHT('00000' + CAST(NEXT VALUE FOR WishlistItemSeq AS NVARCHAR(5)), 5),
    wishlist_id NVARCHAR(10),
    product_id NVARCHAR(10),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

CREATE TABLE Addresses (
    address_id NVARCHAR(10) PRIMARY KEY DEFAULT 'ADDR' + RIGHT('00000' + CAST(NEXT VALUE FOR AddressSeq AS NVARCHAR(5)), 5),
    customer_id NVARCHAR(10),
    address_type NVARCHAR(20) NOT NULL,
    recipient_name NVARCHAR(100) NOT NULL,
    address NVARCHAR(255) NOT NULL,
    city NVARCHAR(100) NOT NULL,
    state NVARCHAR(100) NOT NULL,
    zip_code NVARCHAR(10) NOT NULL,
    phone_number NVARCHAR(20) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Status (
    status_id NVARCHAR(10) PRIMARY KEY DEFAULT 'OSTAT' + RIGHT('00000' + CAST(NEXT VALUE FOR StatusSeq AS NVARCHAR(5)), 5),
    status_name NVARCHAR(50) NOT NULL,
    description TEXT
);

CREATE TABLE Orders (
    order_id NVARCHAR(10) PRIMARY KEY DEFAULT 'ORD' + RIGHT('00000' + CAST(NEXT VALUE FOR OrderSeq AS NVARCHAR(5)), 5),
    customer_id NVARCHAR(10),
    order_date DATETIME NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    status_id NVARCHAR(10), -- Change this to match the length of status_id in Order_Status table
    shipping_address NVARCHAR(255) NOT NULL,
    shipping_city NVARCHAR(100) NOT NULL,
    shipping_state NVARCHAR(100) NOT NULL,
    shipping_zip_code NVARCHAR(10) NOT NULL,
    shipping_phone_number NVARCHAR(20) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (status_id) REFERENCES Order_Status(status_id) -- Change the reference to status_id
);

CREATE TABLE Order_Items (
    order_item_id NVARCHAR(10) PRIMARY KEY DEFAULT 'OITEM' + RIGHT('00000' + CAST(NEXT VALUE FOR OrderItemSeq AS NVARCHAR(5)), 5),
    order_id NVARCHAR(10),
    product_id NVARCHAR(10),
    quantity INT NOT NULL,
    price_per_unit DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

CREATE TABLE Payments (
    payment_id NVARCHAR(10) PRIMARY KEY DEFAULT 'PAY' + RIGHT('00000' + CAST(NEXT VALUE FOR PaymentSeq AS NVARCHAR(5)), 5),
    order_id NVARCHAR(10),
    payment_date DATETIME NOT NULL,
    payment_amount DECIMAL(10, 2) NOT NULL,
    payment_method NVARCHAR(50) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Shipping (
    shipping_id NVARCHAR(10) PRIMARY KEY DEFAULT 'SHIP' + RIGHT('00000' + CAST(NEXT VALUE FOR ShippingSeq AS NVARCHAR(5)), 5),
    order_id NVARCHAR(10),
    carrier_name NVARCHAR(100) NOT NULL,
    tracking_number NVARCHAR(100) NOT NULL,
    estimated_delivery_date DATE,
    actual_delivery_date DATE,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Product_Analytics (
    analytics_id NVARCHAR(10) PRIMARY KEY DEFAULT 'ANL' + RIGHT('00000' + CAST(NEXT VALUE FOR AnalyticsSeq AS NVARCHAR(5)), 5),
    product_id NVARCHAR(10),
    views_count INT NOT NULL,
    sales_count INT NOT NULL,
    add_to_cart_count INT NOT NULL,
    created_at DATETIME,
    updated_at DATETIME,
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

CREATE TABLE Product_Images (
    image_id NVARCHAR(10) PRIMARY KEY DEFAULT 'IMG' + RIGHT('00000' + CAST(NEXT VALUE FOR ImageSeq AS NVARCHAR(5)), 5),
    product_id NVARCHAR(10),
    image_url NVARCHAR(255) NOT NULL,
    is_primary BIT NOT NULL,
    created_at DATETIME,
    updated_at DATETIME,
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

CREATE TABLE Product_Attributes (
    attribute_id NVARCHAR(10) PRIMARY KEY DEFAULT 'ATTR' + RIGHT('00000' + CAST(NEXT VALUE FOR AttributeSeq AS NVARCHAR(5)), 5),
    product_id NVARCHAR(10),
    attribute_name NVARCHAR(100) NOT NULL,
    attribute_value NVARCHAR(255) NOT NULL,
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

CREATE TABLE Reviews (
    review_id NVARCHAR(10) PRIMARY KEY DEFAULT 'REV' + RIGHT('00000' + CAST(NEXT VALUE FOR ReviewSeq AS NVARCHAR(5)), 5),
    product_id NVARCHAR(10),
    customer_id NVARCHAR(10),
    rating INT NOT NULL,
    review_text TEXT,
    review_date DATETIME,
    is_verified BIT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES Product(product_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Product_Questions (
    question_id NVARCHAR(10) PRIMARY KEY DEFAULT 'QST' + RIGHT('00000' + CAST(NEXT VALUE FOR QuestionSeq AS NVARCHAR(5)), 5),
    product_id NVARCHAR(10),
    customer_id NVARCHAR(10),
    question_text TEXT NOT NULL,
    question_date DATETIME,
    is_answered BIT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES Product(product_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Cart (
    cart_id NVARCHAR(10) PRIMARY KEY DEFAULT 'CART' + RIGHT('00000' + CAST(NEXT VALUE FOR CartSeq AS NVARCHAR(5)), 5),
    customer_id NVARCHAR(10),
    created_at DATETIME,
    updated_at DATETIME,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Cart_Items (
    cart_item_id NVARCHAR(10) PRIMARY KEY DEFAULT 'CITEM' + RIGHT('00000' + CAST(NEXT VALUE FOR CartItemSeq AS NVARCHAR(5)), 5),
    cart_id NVARCHAR(10),
    product_id NVARCHAR(10),
    quantity INT NOT NULL,
    price_per_unit DECIMAL(10, 2) NOT NULL,
    created_at DATETIME,
    updated_at DATETIME,
    FOREIGN KEY (cart_id) REFERENCES Cart(cart_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

CREATE TABLE Customers_Coupons (
    customer_id NVARCHAR(10),
    coupon_id NVARCHAR(10),
    PRIMARY KEY (customer_id, coupon_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (coupon_id) REFERENCES Coupons(coupon_id)
);

CREATE TABLE Product_Category_Map (
    product_id NVARCHAR(10),
    category_id NVARCHAR(10),
    PRIMARY KEY (product_id, category_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id),
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);
